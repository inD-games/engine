macro(utils_init)
    include(FetchContent)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
    set(CMAKE_CXX_STANDARD 23)
    set(CMAKE_CXX_EXTENSIONS OFF)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
endmacro()

macro(utils_build)
    if (WIN32)
        add_executable(${PROJECT_NAME} WIN32 main.cpp)
    else ()
        add_executable(${PROJECT_NAME} main.cpp)
    endif ()

    include(CheckCXXCompilerFlag)
    if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
        CHECK_CXX_COMPILER_FLAG(/m64 FLAG_IS_OK)
        if (FLAG_IS_OK)
            target_compile_options(${PROJECT_NAME} PRIVATE /m64)
        endif ()
    elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
        CHECK_CXX_COMPILER_FLAG(-m64 FLAG_IS_OK)
        if (FLAG_IS_OK)
            target_compile_options(${PROJECT_NAME} PRIVATE -m64)
        endif ()
    endif ()

    if (WIN32)
        message(STATUS "OS >>> Windows")
    elseif (APPLE)
        message(STATUS "OS >>> Apple")
    elseif (UNIX OR LINUX)
        message(STATUS "OS >>> Linux")
    else ()
        message(STATUS "OS >>> Unknown")
    endif ()

    message(STATUS "COMPILER >>> ${CMAKE_CXX_COMPILER_ID}")
    message(STATUS "PROJECT_BINARY_DIR >>> ${PROJECT_BINARY_DIR}")
    message(STATUS "CMAKE_CXX_FLAGS >>> ${CMAKE_CXX_FLAGS}")
    message(STATUS "CMAKE_CXX_FLAGS_DEBUG >>> ${CMAKE_CXX_FLAGS_DEBUG}")
    message(STATUS "CMAKE_CXX_FLAGS_RELEASE >>> ${CMAKE_CXX_FLAGS_RELEASE}")

    if (MINGW)
        target_link_libraries(${PROJECT_NAME} PRIVATE -static-libstdc++ -static-libgcc)
    endif ()
endmacro()
